import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Send, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useToast } from "@/hooks/use-toast";
import { getAgents, getChatMessages, sendMessage } from "@/api/agents";
import type { Agent, ChatMessage } from "@shared/schema";
import agentThumbnailPath from "@assets/bfe0fc74-d492-428f-8aa1-b4f6abe5f43d_1751950556077.png";
import agentFacePath from "@assets/ahora si cono_1751958683994.gif";
import aiLogoPath from "@assets/afase_1751962561074.png";
import vinemindLogoPath from "@assets/aefaes_1751963873216.png";

export default function Agents() {
  const [selectedAgentId, setSelectedAgentId] = useState<number | null>(null);
  const [messageInput, setMessageInput] = useState("");
  const [isAgentLoading, setIsAgentLoading] = useState(true);
  const [showComponents, setShowComponents] = useState({
    agentGif: false,
    agentName: false,
    agentDescription: false,
    agentButton: false
  });

  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch agents
  const { data: agents = [], isLoading: agentsLoading } = useQuery({
    queryKey: ["/api/agents"],
    queryFn: getAgents,
  });

  // Fetch messages for selected agent
  const { data: messages = [], isLoading: messagesLoading } = useQuery({
    queryKey: ["/api/agents", selectedAgentId, "messages"],
    queryFn: () => selectedAgentId ? getChatMessages(selectedAgentId) : [],
    enabled: !!selectedAgentId,
  });

  // Auto-select first agent and handle timed loading sequence
  useEffect(() => {
    if (agents.length > 0 && !selectedAgentId) {
      setSelectedAgentId(agents[0].id);
    }
  }, [agents, selectedAgentId]);

  // Timed loading sequence when agent is selected
  useEffect(() => {
    if (selectedAgentId && isAgentLoading) {
      // Reset all component visibility
      setShowComponents({
        agentGif: false,
        agentName: false,
        agentDescription: false,
        agentButton: false
      });

      // Show loading for exactly 1 second
      const loadingTimer = setTimeout(() => {
        setIsAgentLoading(false);
        
        // Fade in components sequentially
        setTimeout(() => setShowComponents(prev => ({ ...prev, agentGif: true })), 0);
        setTimeout(() => setShowComponents(prev => ({ ...prev, agentName: true })), 100);
        setTimeout(() => setShowComponents(prev => ({ ...prev, agentDescription: true })), 200);
        setTimeout(() => setShowComponents(prev => ({ ...prev, agentButton: true })), 300);
      }, 1000);

      return () => clearTimeout(loadingTimer);
    }
  }, [selectedAgentId, isAgentLoading]);



  // Send message mutation
  const sendMessageMutation = useMutation({
    mutationFn: ({ agentId, message }: { agentId: number; message: string }) => 
      sendMessage(agentId, message),
    onSuccess: () => {
      queryClient.invalidateQueries({ 
        queryKey: ["/api/agents", selectedAgentId, "messages"] 
      });
      setMessageInput("");
    },
    onError: () => {
      toast({ title: "Failed to send message", variant: "destructive" });
    },
  });

  // Select first agent by default
  useEffect(() => {
    if (agents.length > 0 && !selectedAgentId) {
      setSelectedAgentId(agents[0].id);
    }
  }, [agents, selectedAgentId]);



  const selectedAgent = agents.find(agent => agent.id === selectedAgentId);



  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (selectedAgentId && messageInput.trim()) {
      sendMessageMutation.mutate({ agentId: selectedAgentId, message: messageInput.trim() });
    }
  };

  const handleClearChat = () => {
    if (!selectedAgentId) return;
    
    // Clear the messages cache for the selected agent
    queryClient.setQueryData(["/api/agents", selectedAgentId, "messages"], []);
    toast({
      title: "Chat cleared",
      description: "Conversation history has been cleared."
    });
  };

  if (agentsLoading) {
    return (
      <div className="pt-16 flex items-center justify-center min-h-screen bg-black">
        <div className="text-white">Loading agents...</div>
      </div>
    );
  }

  return (
    <div className="pt-16 h-screen bg-black overflow-hidden font-mono">
      <div className="h-full flex gap-2 p-2"
           style={{
             backgroundImage: `
               linear-gradient(90deg, rgba(59, 130, 246, 0.03) 1px, transparent 1px),
               linear-gradient(rgba(59, 130, 246, 0.03) 1px, transparent 1px),
               radial-gradient(circle at 20% 80%, rgba(59, 130, 246, 0.1) 0%, transparent 50%),
               radial-gradient(circle at 80% 20%, rgba(234, 179, 8, 0.05) 0%, transparent 50%)
             `,
             backgroundSize: '50px 50px, 50px 50px, 100% 100%, 100% 100%'
           }}>
        
        {/* Panel 1 - Agent Selector (15-18% width) */}
        <div className="w-[18%] bg-black/80 border border-white/20 backdrop-blur-sm p-4 overflow-hidden relative">
          {/* Matrix-style cascading squares background */}
          <div className="absolute inset-0 overflow-hidden pointer-events-none">
            <div className="matrix-rain">
              {[...Array(15)].map((_, i) => (
                <div
                  key={i}
                  className="matrix-column"
                  style={{
                    left: `${(i * 6.67)}%`,
                    animationDelay: `${Math.random() * 4}s`,
                    animationDuration: `${3 + Math.random() * 2}s`
                  }}
                >
                  {[...Array(25)].map((_, j) => (
                    <div
                      key={j}
                      className="matrix-square"
                      style={{
                        animationDelay: `${j * 0.08 + Math.random() * 0.5}s`
                      }}
                    />
                  ))}
                </div>
              ))}
            </div>
          </div>
          <div className="flex items-center justify-center mb-4">
            <h2 className="text-lg font-bold text-white tracking-wider">VineMind</h2>
          </div>

          <ScrollArea className="h-[calc(100vh-160px)]">
            <div className="space-y-2">
              {agents.map((agent) => (
                <div
                  key={agent.id}
                  onClick={() => {
                    setSelectedAgentId(agent.id);
                    setIsAgentLoading(true);
                  }}
                  className={`group relative flex items-center space-x-3 p-3 rounded cursor-pointer transition-all duration-300 ${
                    selectedAgentId === agent.id
                      ? "bg-blue-500/20 border border-blue-400/60 shadow-[0_0_20px_rgba(59,130,246,0.5)]"
                      : "bg-white/5 border border-transparent hover:bg-white/10 hover:border-white/40 hover:shadow-[0_0_15px_rgba(255,255,255,0.4)]"
                  }`}
                >
                  <div className="relative flex-shrink-0">
                    <img 
                      src={agentThumbnailPath} 
                      alt={agent.name}
                      className="w-10 h-10 rounded-full object-cover"
                      style={{ filter: 'hue-rotate(200deg) saturate(1.2)' }}
                    />
                    <div className={`absolute -bottom-0.5 -right-0.5 w-3 h-3 rounded-full border border-black ${
                      agent.status === "online" ? "bg-green-400 shadow-[0_0_6px_rgba(34,197,94,0.8)]" : "bg-gray-400"
                    }`} />
                  </div>
                  <div className="flex-1 min-w-0 text-left">
                    <div className="flex items-center">
                      <h3 className="text-white font-medium text-sm truncate tracking-wide">{agent.name}</h3>
                    </div>
                    <p className="text-gray-400 text-xs truncate">{agent.role}</p>
                  </div>
                </div>
              ))}
            </div>
          </ScrollArea>
        </div>

        {/* Panel 2 - Agent Display (ID/Passport Terminal) */}
        <div className="w-[32%] bg-black border-2 border-white/60 backdrop-blur-sm relative overflow-hidden">
          
          {/* Scanning line animation */}
          <div className="absolute top-0 left-0 w-full h-0.5 bg-gradient-to-r from-transparent via-blue-400 to-transparent opacity-60 animate-pulse"></div>
          
          {selectedAgent ? (
            <div className="h-full flex flex-col justify-start pt-2">
              {/* Agent Face GIF - Full vertical presence */}
              <div className="w-full flex justify-center flex-1">
                {isAgentLoading ? (
                  <div className="flex items-center justify-center h-full transition-opacity duration-500">
                    <div className="relative">
                      {/* Spinning ring loader */}
                      <div className="w-32 h-32 border-4 border-transparent border-t-white rounded-full animate-spin"></div>
                      {/* AI Logo in center */}
                      <div className="absolute inset-0 flex items-center justify-center">
                        <img 
                          src={aiLogoPath} 
                          alt="AI"
                          className="w-16 h-16 object-contain opacity-90"
                        />
                      </div>
                    </div>
                  </div>
                ) : (
                  <img 
                    src={agentFacePath} 
                    alt="Agent"
                    className={`h-full object-contain transition-opacity duration-500 ${
                      showComponents.agentGif ? 'opacity-100' : 'opacity-0'
                    }`}
                    style={{ 
                      maxHeight: 'calc(100vh - 250px)',
                      width: 'auto'
                    }}
                  />
                )}
              </div>
              
              {/* Agent Info Panel - Compact bottom section */}
              <div className="mx-4 mb-4 bg-black/40 border border-white/30 p-3 space-y-2 backdrop-blur-sm">
                <div className={`transition-opacity duration-500 ${
                  showComponents.agentName ? 'opacity-100' : 'opacity-0'
                }`}>
                  <h2 className="text-white font-bold text-sm tracking-wider mb-0.5">NAME</h2>
                  <p className="text-yellow-400 text-base font-medium tracking-wide">{selectedAgent.name}</p>
                </div>
                <div className={`transition-opacity duration-500 ${
                  showComponents.agentDescription ? 'opacity-100' : 'opacity-0'
                }`}>
                  <h3 className="text-white font-bold text-sm tracking-wider mb-0.5">USE CASE</h3>
                  <p className="text-gray-300 text-xs">{selectedAgent.role}</p>
                </div>
                
                {/* Agent NFT Button */}
                <div className={`pt-1 transition-opacity duration-500 ${
                  showComponents.agentButton ? 'opacity-100' : 'opacity-0'
                }`}>
                  <button className="bg-black border-2 border-white/80 px-3 py-1 text-white font-bold tracking-wider text-xs hover:bg-white/10 hover:shadow-[0_0_15px_rgba(255,255,255,0.3)] transition-all duration-200">
                    [ Agent NFT ]
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div className="h-full flex items-center justify-center">
              <p className="text-gray-400 font-mono tracking-wider">SELECT AGENT TO INITIALIZE</p>
            </div>
          )}
        </div>

        {/* Panel 3 - Chat Area (Largest panel) */}
        <div className="flex-1 bg-black/80 border border-white/20 backdrop-blur-sm flex flex-col relative overflow-hidden">
          
          {/* VINEMIND Logo - Always visible background */}
          <div className="absolute inset-0 flex items-center justify-center pointer-events-none" style={{ zIndex: 1 }}>
            <img 
              src={vinemindLogoPath} 
              alt="VINEMIND"
              className="max-w-2xl w-full h-auto opacity-15"
              style={{ maxHeight: '400px', minHeight: '300px' }}
            />
          </div>
          
          {selectedAgent ? (
            <>
              {/* Chat Messages */}
              <ScrollArea className="flex-1 p-4 relative" style={{ zIndex: 10 }}>
                <div className="space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                    >
                      <div className={`relative max-w-[85%] ${message.sender === "user" ? "mr-4" : "ml-4"}`}>
                        {/* Message Bubble */}
                        <div
                          className={`relative p-3 rounded-lg backdrop-blur-sm ${
                            message.sender === "user"
                              ? "bg-white/25 text-white border border-white/40 shadow-[0_0_8px_rgba(255,255,255,0.2)]"
                              : "bg-gray-800/95 text-white border border-white/30 shadow-[0_0_8px_rgba(255,255,255,0.1)]"
                          }`}
                        >
                          <p className="text-sm font-mono">{message.message}</p>
                          <p className="text-xs text-gray-400 mt-1 font-mono">
                            {new Date(message.timestamp).toLocaleTimeString()}
                          </p>
                        </div>

                        {/* Directional Tail with Logo */}
                        <div className={`absolute top-4 ${
                          message.sender === "user" 
                            ? "-right-3 transform rotate-45" 
                            : "-left-3 transform -rotate-45"
                        }`}>
                          <div className={`w-6 h-6 backdrop-blur-sm ${
                            message.sender === "user"
                              ? "bg-white/25 border-r border-b border-white/40"
                              : "bg-gray-800/95 border-r border-b border-white/30"
                          } flex items-center justify-center`}>
                            <img 
                              src={aiLogoPath} 
                              alt="AI"
                              className="w-3 h-3 object-contain opacity-80 transform -rotate-45"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  {messagesLoading && (
                    <div className="text-gray-400 text-center font-mono text-sm backdrop-blur-sm bg-black/50 p-2 rounded">
                      LOADING MESSAGES...
                    </div>
                  )}
                </div>
              </ScrollArea>
                <div className="space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                    >
                      <div className={`relative max-w-[85%] ${message.sender === "user" ? "mr-4" : "ml-4"}`}>
                        {/* Message Bubble */}
                        <div
                          className={`relative p-3 rounded-lg backdrop-blur-sm ${
                            message.sender === "user"
                              ? "bg-white/25 text-white border border-white/40 shadow-[0_0_8px_rgba(255,255,255,0.2)]"
                              : "bg-gray-800/95 text-white border border-white/30 shadow-[0_0_8px_rgba(255,255,255,0.1)]"
                          }`}
                        >
                          <p className="text-sm font-mono">{message.message}</p>
                          <p className="text-xs text-gray-400 mt-1 font-mono">
                            {new Date(message.timestamp).toLocaleTimeString()}
                          </p>
                        </div>

                        {/* Directional Tail with Logo */}
                        <div className={`absolute top-4 ${
                          message.sender === "user" 
                            ? "-right-3 transform rotate-45" 
                            : "-left-3 transform -rotate-45"
                        }`}>
                          <div className={`w-6 h-6 backdrop-blur-sm ${
                            message.sender === "user"
                              ? "bg-white/25 border-r border-b border-white/40"
                              : "bg-gray-800/95 border-r border-b border-white/30"
                          } flex items-center justify-center`}>
                            <img 
                              src={aiLogoPath} 
                              alt="AI"
                              className="w-3 h-3 object-contain opacity-80 transform -rotate-45"
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  {messagesLoading && (
                    <div className="text-gray-400 text-center font-mono text-sm backdrop-blur-sm bg-black/50 p-2 rounded">
                      LOADING MESSAGES...
                    </div>
                  )}
                </div>
              </ScrollArea>

              {/* Message Input Panel */}
              <div className="p-4 bg-gray-900/60 border-t border-white/10 relative z-10">
                <form onSubmit={handleSendMessage} className="flex space-x-2">
                  {/* Clear Chat Button */}
                  <button
                    type="button"
                    onClick={handleClearChat}
                    className="p-2 text-white/70 hover:text-white hover:bg-white/10 rounded transition-all duration-200 cursor-pointer focus:outline-none"
                    disabled={sendMessageMutation.isPending}
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                  
                  <Input
                    value={messageInput}
                    onChange={(e) => setMessageInput(e.target.value)}
                    placeholder="ENTER MESSAGE..."
                    className="flex-1 bg-black/80 border-white/30 text-white placeholder-gray-500 font-mono text-sm focus:border-blue-400/60 focus:shadow-[0_0_8px_rgba(59,130,246,0.3)]"
                    disabled={sendMessageMutation.isPending}
                  />
                  <Button 
                    type="submit"
                    className="bg-yellow-500/90 text-black hover:bg-blue-400 hover:text-white hover:shadow-[0_0_12px_rgba(59,130,246,0.6)] px-4 transition-all duration-200"
                    disabled={sendMessageMutation.isPending || !messageInput.trim()}
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </form>
              </div>
            </>
          ) : (
            <div className="flex-1 flex items-center justify-center relative z-10">
              <p className="text-gray-400 font-mono tracking-wider">INITIALIZE AGENT CONNECTION</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}